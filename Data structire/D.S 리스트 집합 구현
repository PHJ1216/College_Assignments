3.5 파이썬 리스트 내의 항목들 중에서 가장 큰 항목을 찾아 반환하는 함수를 작성하라. 
def max(x):
    MAX_value=x[0]
    for i in range(10):
        if MAX_value<x[i]:
            MAX_value=x[i]
    print(MAX_value)

a=[1,2,7,8,4,5,10,9,6,3]
max(a)
3.6 파이썬 리스트 내의 항목들 중에서 가장 작은 항목과 큰 항목을 모두 찾아 한꺼번에 반환 하는 함수를 작성하라. 두 값의 반환을 위해 튜플을 사용할 수 있다. 
def maxNmin(x):
    tuple(x)
    print(max(x))
    print(min(x))
    
a=[1,2,7,8,4,5,10,9,6,3]
maxNmin(a)

3.7 두 개의 리스트를 입력 받아 두 리스트에 동일한 항목이 있으면 True를 없으면 False를 반환하는 함수를 작성하라.

def same_item(list1, list2):
    for i in list1:
        if i in list2: return True
    return False
​

3.8 항목들이 오름차순으로 정렬된 두 개의 리스트를 받아 하나로 병합하는 함수를 작성하라. 단 병합된 리스트의 모든 항목들도 정렬되어 있어야 한다.

def sum_list(l1, l2):
    c = []
    k = 0
    j = 0
    while k != len(l1) and j != len(l2):
        if l1[k] < l2[j]:
            c.append(l1[k])
            k += 1
        elif l1[k] > l2[j]:
            c.append(l2[j])
            j += 1
    while j != len(l2):
        c.append(l2[j])
        j += 1
    while k != len(l1):
        c.append(l1[k])
        k += 1
    return c
​
3.9 두 집합 A와 B가 있을 때, A = B인 경우에도 A는 B의 부분집합이 된다. A가 B의 부분집합이지만 A와 B가 같지 않은 경우 A는 B의 진부분집합이다. 어떤 집합이 다른 집합의 진부분집합인지를 검사하는 메소드를 3.6절의 Set 클래스에 추가하라.

class Set:				        
    def __init__( self ):		
        self.items = []			
    def size( self ): 			
        return len(self.items)	
    def display(self, msg =''):		
        print(msg, self.items)	

    def contains(self, item) :
       return item in self.items		

    def insert(self, elem) :
        if elem not in self.items :
           self.items.append(elem)

    def delete(self, elem) :
        if elem in self.items :
           self.items.remove(elem)

    def union( self, setB ):		    
        setC = Set()			        
        setC.items = list(self.items)	
        for elem in setB.items :	    
            if elem not in self.items :	
                setC.items.append(elem)	
        return setC			            

    def intersect( self, setB ):	
        setC = Set()
        for elem in setB.items :	
            if elem in self.items :	
                setC.items.append(elem)	
        return setC

    def difference( self, setB ):	    
        setC = Set()
        for elem in self.items:		    
            if elem not in setB.items:	
                setC.items.append(elem)	
        return setC
    def isproperSubset(self, setB):
        if setB.size() > self.size():
            c = self.intersect(setB)
            if self.items == c.items and self.items != setB.items:
                return True
        return False


P3.1 배열 구조로 구현한 리스트(3.3절)에서 다음 연산들을 구현하라.

(1) insert() 연산을 파이썬 리스트의 insert()를 사용하지 않고 append()를 사용하여 다시 구현하라.

items = []
def insert(pos, elem):
    n = len(items)
    if n == 0:
        items.append(elem)
    else:
        items.append(items[-1])
        for i in range(n-pos-1, 0, -1):
            items[pos+i] = items[pos+i-1]
        items[pos] = elem

(2) delete() 연산을 파이썬 리스트의 pop(-1)을 사용하여 다시 구현하라. 즉, 리스트의 후단 항목만을 삭제하는 것이다.

def delete(pos):
    new = items[pos+1:len(items)]
    for i in range(len(items)-pos):
        items.pop(-1)
    items.extend(new)

(3) find() 연산을 파이썬 리스트의 index()를 사용하지 않고 구현하라.

def find(item):
    for i in range(len(items)):
        if items[i] == item:
            return i
(4) merge() 연산을 파이썬 리스트의 extend()를 사용하지 않고 직접 구현하라. 앞에서 구현한 insert()와 delete()를 사용할 수 있다.

def merge(list):
    for i in list:
        insert(len(items), i)
​

P3.2 3.4절의 라인 편집기 프로그램을 다음에 제시한 바와 같이 수정하라.

(1) 지정된 파일(test.txt)이 아니라 사용자가 입력하는 파일을 읽을 수 있도록 'l'명령 처리 코드를 수정하라.

(2) 지정된 파일(test.txt)이 아니라 사용자가 입력하는 파일에 현재 문서를 저장할 수 있도록 's'명령 처리 코드를 수정하라.

(3) 문자열을 입력하면 이 문자열을 포함하고 있는 라인들만을 찾아 출력할 수 있는 'f'명령을 추가하라.

class ArrayList:		  
    def __init__( self ):
        self.items = []		

    def insert(self, pos, elem) :
        self.items.insert(pos, elem)
    def delete(self, pos) :
        self.items.pop(pos)
    def isEmpty( self ):
        return self.size() == 0
    def getEntry(self, pos) :
        return self.items[pos]
    def size( self ):
        return len(self.items)
    def clear( self ) :
        self.items = []	
    def find(self, item) :
        return self.items.index(item)
    def replace(self, pos, elem) :
        self.items[pos] = elem
    def sort(self) :
        self.items.sort()
    def merge(self, lst) :
        self.items.extend(lst)
    def display(self, msg='ArrayList:' ):
        print(msg, self.size(), self.items)

def myLineEditor() :	
    list = ArrayList()	
    while True :
        command = input("[메뉴선택] i-입력, d-삭제, r-변경, p-출력, l-파일읽기, s-저장, q-종료, f-찾기=> ")
        if command == 'i' :		
            pos = int( input("  입력행 번호: "))
            str = input("  입력행 내용: ")	    
            list.insert(pos, str)		
        elif command == 'd' :			
            pos = int( input("  삭제행 번호: "))
            list.delete(pos)			
        elif command == 'r' :			
            pos = int( input("  변경행 번호: "))
            str = input("  변경행 내용: ")	    
            list.replace(pos, str)		        
        elif command == 'q' : return	        
        elif command == 'p' :		            
            print('Line Editor')
            for line in range (list.size()) :   
                print('[%2d] '%line, end='')    
                print(list.getEntry(line))      
            print()			                    
        elif command == 'l' :			        
            filename = input("파일이름을 입력하세요: ")
            infile = open(filename , "r")       
            lines = infile.readlines()	        
            for line in lines:		            
                list.insert(list.size(), line.rstrip('\n'))
            infile.close()			
        elif command == 's' :		
            filename = input("파일이름을 입력하세요: ")
            outfile = open(filename , "w")
            for i in range(list.size()) :
                outfile.write(list.getEntry(i)+'\n')
            outfile.close()
        elif command == 'f':
            str = input("문자열을 입력하세요: ")
            for i in range(list.size()):
                if str in list.getEntry(i):
                    print(list.getEntry(i))
​

P3.3 3.6절의 집합의 구현에서 다음 연산들을 제시한 바와 같이 다시 구현하라.

(1) contains()의 연산을 in 연산자를 사용하지 않고 다시 구현하라.

(2) delete() 연산을 in 연산자와 파이썬 리스트의 remove()를 사용하지 않고 다시 구현하라. 이를 위해 앞에서 구현한 contains()와 파이썬 리스트의 pop()을 사용하라.

(3) insert(), union(), intersect(), difference()연산도 모두 in 연산자를 사용하지 않고 contains() 메소드를 이용해 다시 구현하라.

(4) 차집합을 구하는 difference()연산을 연산자 중복을 이용해 구현하라.

(5) 자신이 다른 집합(otherSet)의 부분 집합인지를 검사하는 isSubsetOf(otherSet)연산을 구현하라.

class Set:				        
    def __init__( self ):		
        self.items = []			

    def size( self ): 			
        return len(self.items)	
    def display(self, msg):		
        print(msg, self.items)	

    def contains(self, item) :
        for i in range(len(self.items)):
            if self.items[i] == item :	
                return True
        return False		

    def insert(self, elem) :
        if not self.contains(elem) :
           self.items.append(elem)

    def delete(self, elem) :
        if self.contains(elem):
            for i in range(len(self.items)):
                if self.items[i] == elem :	
                    self.items.pop(i)

    def union( self, setB ):		    
        setC = Set()			        
        setC.items = list(self.items)	
        for elem in setB.items :	    
            if not self.contains(elem) :	
                setC.items.append(elem)	
        return setC			            

    def intersect( self, setB ):	
        setC = Set()
        for elem in setB.items :	
            if self.contains(elem) :	
                setC.items.append(elem)	
        return setC

    def difference( self, setB ):	    
        setC = Set()
        for elem in self.items:		    
            if not self.contains(setB.items):	
                setC.items.append(elem)	
        return setC

    def isSubsetOf(self, otherSet):
        if otherSet.intersect(self) == self.items:
            return True
        return False
​

P3.4 다항식 클래스를 파이썬의 리스트를 이용해 구현하라.

class Polynomial: 
    def __init__( self ):
        self.items = []
    def degree(self) :
        return len(self.items) - 1
    
    def evaluate(self, scalar):
        a = 0
        for i in range(len(self.items)):
            a += self.items[i] * scalar**(self.degree()-i)
        return a
    
    def add(self, rhs):
        p = Polynomial()
        if len(self.items) < len(rhs.items):
            a = rhs.degree() - self.degree()
            for i in range(a):
                p.items.append(rhs.items[i])
            for i in range(len(self.items)):
                p.items.append(self.items[i] + rhs.items[i+a])
        else:
            a = self.degree() - rhs.degree()
            for i in range(a):
                p.items.append(self.items[i])
            for i in range(len(rhs.items)):
                p.items.append(rhs.items[i] + self.items[i+a])
        return p
    
    def subtract(self, rhs) :
        p = Polynomial()
        if len(self.items) < len(rhs.items): 
            a = rhs.degree() - self.degree()
            for i in range(a):
                p.items.append(-rhs.items[i])
            for i in range(len(self.items)):
                p.items.append(self.items[i] - rhs.items[i+a])
        else:
            a = self.degree() - rhs.degree()
            for i in range(a):
                p.items.append(self.items[i])
            for i in range(len(rhs.items)):
                p.items.append(self.items[i+a] - rhs.items[i])
        return p

    def multiply(self, rhs):
        p = Polynomial()
        d1 = self.degree()
        d2 = rhs.degree()
        degree = d1 + d2
    
        for i in range(degree + 1):
            p.items.append(0)
            if len(self.items) > len(rhs.items):
                for j in range(min(i, d2)+1):
                    if i - j > d1:
                        continue
                    p.items[i] += rhs.items[j] * self.items[i-j]
            else:
                for j in range(min(i, d1)+1):
                    if i - j > d2:
                        continue
                    p.items[i] += self.items[j] * rhs.items[i-j]
        return p

    def display(self, msg="f(x) = "):
        print(msg, end='')
        for i in range(self.degree(), 0, -1): 
            print("%5.1fx^%d + " % (self.items[self.degree()-i], i), end = '')
        print("%4.1f" % self.items[-1])
    
def read_poly():
    a = int(input("다항식의 최고 차수를 입력하시오: "))
    p = Polynomial()
    for i in range(a+1):
        b = float(input("x^%d의 계수 : " %(a-i)))
        p.items.append(b)
    return p
